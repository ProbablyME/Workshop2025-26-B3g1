#include <RCSwitch.h>

// ===== LED =====
#define LED_GREEN 5   // D1 = GPIO5 sur ESP8266

// ===== BUZZER =====
#define BUZZER_PIN 14 // D5 = GPIO14 sur ESP8266

RCSwitch mySwitch = RCSwitch();

// Buffer pour reconstituer les messages personnalis√©s
String messageBuffer = "";
int expectedLength = 0;
bool receivingMessage = false;
unsigned long lastPacketTime = 0;
bool ledState = LOW;
const unsigned long BLINK_INTERVAL = 100; // Intervalle de clignotement en ms

// Variables pour gestion des alertes
bool alertActive = false; // Indique si une alerte est en cours
String lastMessage = "";  // Stocke le dernier message re√ßu

// ‚≠ê NOUVELLE VARIABLE POUR CONTR√îLE DU SON ‚≠ê
bool soundEnabled = true; // Contr√¥le global du son

// Variables pour la d√©duplication
unsigned long lastReceivedCode = 0;
unsigned long lastCodeTime = 0;
const unsigned long DUPLICATE_DELAY_MS = 200;

// ===== VARIABLES POUR ALERTE SONORE NUCL√âAIRE =====
unsigned long lastSoundChange = 0;
int currentTone = 0;
bool soundState = false;

// S√©quence d'alerte nucl√©aire (fr√©quences en Hz)
const int NUCLEAR_TONES[] = {200, 300, 400, 500, 600, 700, 800, 900, 1000, 900, 800, 700, 600, 500, 400, 300};
const int NUM_TONES = sizeof(NUCLEAR_TONES) / sizeof(NUCLEAR_TONES[0]);
const unsigned long TONE_DURATION = 150; // Dur√©e de chaque ton en ms

void setup() {
  Serial.begin(115200);
  Serial.println("\n=== R√©cepteur 433MHz Messages Personnalis√©s ===");
  Serial.println("DEBUG: Initialisation du r√©cepteur...");

  // Configuration de la LED
  pinMode(LED_GREEN, OUTPUT);
  digitalWrite(LED_GREEN, LOW);
  Serial.println("DEBUG: LED verte initialis√©e (D1/GPIO5)");

  // Configuration du BUZZER
  Serial.println("DEBUG: Buzzer initialis√© (D5/GPIO14)");

  mySwitch.enableReceive(4);  // D2 = GPIO4

  Serial.println("DEBUG: R√©cepteur configur√© sur GPIO4");
  Serial.println("DEBUG: R√©cepteur pr√™t. En attente de messages personnalis√©s...");
  Serial.println("üîß COMMANDES DISPONIBLES:");
  Serial.println("   - 'stopalert' : Arr√™ter l'alerte LED + SON");
  Serial.println("   - 'soundon'   : ‚≠ê ACTIVER le son");
  Serial.println("   - 'soundoff'  : ‚≠ê D√âSACTIVER le son");
  Serial.println("   - 'status'    : V√©rifier l'√©tat");
  Serial.println("   - 'help'      : Afficher l'aide");
  Serial.println("   - 'testsound' : Tester le son d'alerte\n");

  // Test rapide du buzzer au d√©marrage (si son activ√©)
  if (soundEnabled) {
    Serial.println("üîä Test du buzzer...");
    playStartupSound();
  } else {
    Serial.println("üîá Buzzer d√©sactiv√© au d√©marrage");
  }
}

void loop() {
  // Gestion du clignotement de la LED ET du son d'alerte
  if (alertActive) {
    unsigned long currentTime = millis();
    
    // Clignotement LED
    static unsigned long lastBlinkTime = 0;
    if (currentTime - lastBlinkTime >= BLINK_INTERVAL) {
      ledState = !ledState;
      digitalWrite(LED_GREEN, ledState);
      lastBlinkTime = currentTime;
    }

    // ‚≠ê SON D'ALERTE NUCL√âAIRE CONTINU (SEULEMENT SI ACTIV√â) ‚≠ê
    if (soundEnabled) {
      playNuclearAlert();
    }
    
  } else {
    digitalWrite(LED_GREEN, LOW);
    if (soundEnabled) {
      noTone(BUZZER_PIN); // Arr√™ter le son seulement si il √©tait activ√©
    }
  }

  // Timeout pour r√©initialiser si on ne re√ßoit pas de paquet pendant 10 secondes
  if (receivingMessage && (millis() - lastPacketTime > 10000)) {
    Serial.println("DEBUG: Timeout - R√©initialisation du buffer");
    resetMessageBuffer();
  }

  // Traitement des commandes du terminal
  if (Serial.available()) {
    String command = Serial.readStringUntil('\n');
    command.trim();
    command.toLowerCase();
    processTerminalCommand(command);
  }

  if (mySwitch.available()) {
    unsigned long code = mySwitch.getReceivedValue();
    int bitLength = mySwitch.getReceivedBitlength();

    // D√©duplication
    unsigned long currentTime = millis();
    if (code == lastReceivedCode &&
        (currentTime - lastCodeTime) < DUPLICATE_DELAY_MS) {
      mySwitch.resetAvailable();
      return;
    }

    lastReceivedCode = code;
    lastCodeTime = currentTime;

    // Filtre les codes valides
    if (code != 0 && bitLength == 32) {
      processCode(code);
    }

    mySwitch.resetAvailable();
  }
}

// ===== FONCTIONS SONORES MODIFI√âES =====
void playStartupSound() {
  if (!soundEnabled) return; // ‚≠ê V√©rifier si son activ√©
  
  // Son de d√©marrage - 3 bips courts
  for (int i = 0; i < 3; i++) {
    tone(BUZZER_PIN, 800);
    delay(100);
    noTone(BUZZER_PIN);
    delay(100);
  }
}

void playNuclearAlert() {
  if (!soundEnabled) return; // ‚≠ê V√©rifier si son activ√©
  
  unsigned long currentTime = millis();
  
  if (currentTime - lastSoundChange >= TONE_DURATION) {
    tone(BUZZER_PIN, NUCLEAR_TONES[currentTone]);
    currentTone = (currentTone + 1) % NUM_TONES;
    lastSoundChange = currentTime;
  }
}

void playMessageReceivedSound() {
  if (!soundEnabled) return; // ‚≠ê V√©rifier si son activ√©
  
  // Son d'alerte d'urgence quand message re√ßu
  Serial.println("üö® SIGNAL D'ALERTE NUCL√âAIRE ACTIV√â !");
  noTone(BUZZER_PIN);
  
  // Sir√®ne d'urgence
  for (int i = 0; i < 5; i++) {
    // Mont√©e
    for (int freq = 200; freq <= 1000; freq += 50) {
      tone(BUZZER_PIN, freq);
      delay(20);
    }
    // Descente
    for (int freq = 1000; freq >= 200; freq -= 50) {
      tone(BUZZER_PIN, freq);
      delay(20);
    }
  }
  
  // Reset pour l'alerte continue
  currentTone = 0;
  lastSoundChange = millis();
}

void playConfirmationSound() {
  if (!soundEnabled) return; // ‚≠ê V√©rifier si son activ√©
  
  tone(BUZZER_PIN, 440);
  delay(200);
  noTone(BUZZER_PIN);
}

void processTerminalCommand(String command) {
  Serial.print("üìù Commande re√ßue: '");
  Serial.print(command);
  Serial.println("'");

  // ‚≠ê‚≠ê NOUVELLES COMMANDES POUR CONTR√îLE DU SON ‚≠ê‚≠ê
  if (command == "soundon") {
    soundEnabled = true;
    Serial.println("üîä SON ACTIV√â - Les alertes sonores sont maintenant actives");
    playConfirmationSound(); // Jouer un son de confirmation
  }
  else if (command == "soundoff") {
    soundEnabled = false;
    noTone(BUZZER_PIN); // Arr√™ter imm√©diatement tout son en cours
    Serial.println("üîá SON D√âSACTIV√â - Les alertes sont maintenant silencieuses");
    Serial.println("üí° La LED continuera √† clignoter lors des alertes");
  }
  else if (command == "stopalert") {
    if (alertActive) {
      alertActive = false;
      digitalWrite(LED_GREEN, LOW);
      noTone(BUZZER_PIN); // Arr√™ter le son
      Serial.println("‚úÖ ALERTE ARR√äT√âE - LED + SON √âTEINTS");
      Serial.print("üìÑ Message lu: '");
      Serial.print(lastMessage);
      Serial.println("'");
      
      // Son de confirmation (si son activ√©)
      playConfirmationSound();
    } else {
      Serial.println("‚ö†Ô∏è Aucune alerte active √† arr√™ter");
    }
  } 
  else if (command == "status") {
    Serial.println("üìä === √âTAT DU SYST√àME ===");
    Serial.print("üö® Alerte active: ");
    Serial.println(alertActive ? "OUI" : "NON");
    Serial.print("üîä Son: ");
    Serial.println(soundEnabled ? "ACTIV√â" : "D√âSACTIV√â"); // ‚≠ê Afficher l'√©tat du son
    
    if (alertActive) {
      Serial.print("üì© Message en attente: '");
      Serial.print(lastMessage);
      Serial.println("'");
      Serial.println("üí° LED: Clignotante");
      if (soundEnabled) {
        Serial.println("üîä SON: Alerte nucl√©aire active");
      } else {
        Serial.println("üîá SON: D√©sactiv√© (alerte silencieuse)");
      }
    } else {
      Serial.println("üí° LED: √âteinte");
      Serial.println("üîä SON: Arr√™t√©");
    }
    Serial.println("========================");
  }
  else if (command == "testsound") {
    if (soundEnabled) {
      Serial.println("üß™ TEST: Son d'alerte nucl√©aire...");
      playMessageReceivedSound();
      Serial.println("‚úÖ Test sonore termin√©");
    } else {
      Serial.println("üîá Son d√©sactiv√© - Tapez 'soundon' pour activer le son");
    }
  }
  else if (command == "help") {
    showHelp();
  }
  else if (command == "test") {
    Serial.println("üß™ TEST: Simulation d'une alerte compl√®te...");
    alertActive = true;
    lastMessage = "Message de test nucl√©aire";
    
    // Jouer le son de r√©ception seulement si activ√©
    if (soundEnabled) {
      playMessageReceivedSound();
      Serial.println("‚úÖ Alerte de test activ√©e avec son");
    } else {
      Serial.println("‚úÖ Alerte de test activ√©e (silencieuse)");
    }
    Serial.println("üí° Tapez 'stopalert' pour arr√™ter");
  }
  else if (command == "clear") {
    Serial.print("\033[2J\033[H");
    Serial.println("üßπ Terminal effac√©");
  }
  else if (command == "") {
    return;
  }
  else {
    Serial.print("‚ùå Commande inconnue: '");
    Serial.print(command);
    Serial.println("'");
    Serial.println("üí° Tapez 'help' pour voir les commandes disponibles");
  }
}

void showHelp() {
  Serial.println("üîß === AIDE - COMMANDES DISPONIBLES ===");
  Serial.println("stopalert  - Arr√™ter l'alerte LED + SON");
  Serial.println("soundon    - ‚≠ê ACTIVER le son des alertes");
  Serial.println("soundoff   - ‚≠ê D√âSACTIVER le son des alertes");
  Serial.println("status     - Afficher l'√©tat du syst√®me");
  Serial.println("test       - Simuler une alerte compl√®te");
  Serial.println("testsound  - Tester uniquement le son");
  Serial.println("clear      - Effacer l'√©cran du terminal");
  Serial.println("help       - Afficher cette aide");
  Serial.println("=====================================");
  Serial.println("üí° Les commandes ne sont pas sensibles √† la casse");
  Serial.println("üîä BUZZER connect√© sur pin D5 (GPIO14)");
  
  // ‚≠ê Afficher l'√©tat actuel du son
  Serial.print("üîä √âtat du son: ");
  Serial.println(soundEnabled ? "ACTIV√â" : "D√âSACTIV√â");
}

void processCode(unsigned long code) {
  byte byte0 = (code >> 24) & 0xFF;
  byte byte1 = (code >> 16) & 0xFF;
  byte byte2 = (code >> 8) & 0xFF;
  byte byte3 = code & 0xFF;

  // Code de d√©but (0xFF)
  if (byte0 == 0xFF) {
    expectedLength = code & 0xFF;
    messageBuffer = "";
    receivingMessage = true;
    lastPacketTime = millis();
    Serial.print("DEBUG: D√©but de message - Longueur attendue: ");
    Serial.println(expectedLength);
    return;
  }

  // Code de fin (0xFE)
  if (byte0 == 0xFE) {
    if (receivingMessage) {
      Serial.print("‚úÖ MESSAGE PERSONNALIS√â RE√áU: '");
      Serial.print(messageBuffer);
      Serial.print("' (");
      Serial.print(messageBuffer.length());
      Serial.println(" caract√®res)");

      // ‚≠ê ACTIVER L'ALERTE COMPL√àTE (LED + SON SI ACTIV√â) ‚≠ê
      alertActive = true;
      lastMessage = messageBuffer;
      
      Serial.println("üö® ALERTE NUCL√âAIRE ACTIV√âE !");
      Serial.println("üí° LED: Clignotante");
      
      if (soundEnabled) {
        Serial.println("üîä SON: Alerte nucl√©aire continue");
        // Jouer le son d'alerte lors de la r√©ception
        playMessageReceivedSound();
      } else {
        Serial.println("üîá SON: D√©sactiv√© (alerte silencieuse)");
      }
      
      Serial.println("üí° Tapez 'stopalert' dans le terminal pour arr√™ter l'alerte");
    }
    resetMessageBuffer();
    return;
  }

  // Paquet de donn√©es
  if (receivingMessage) {
    int packetNumber = byte0;

    Serial.print("DEBUG: Paquet ");
    Serial.print(packetNumber + 1);
    Serial.print(" re√ßu: 0x");
    Serial.println(code, HEX);

    if (byte1 != 0x00 && messageBuffer.length() < expectedLength) {
      if (byte1 >= 32 && byte1 <= 126) messageBuffer += (char)byte1;
    }
    if (byte2 != 0x00 && messageBuffer.length() < expectedLength) {
      if (byte2 >= 32 && byte2 <= 126) messageBuffer += (char)byte2;
    }
    if (byte3 != 0x00 && messageBuffer.length() < expectedLength) {
      if (byte3 >= 32 && byte3 <= 126) messageBuffer += (char)byte3;
    }

    Serial.print("  Buffer actuel: '");
    Serial.print(messageBuffer);
    Serial.print("' (");
    Serial.print(messageBuffer.length());
    Serial.print("/");
    Serial.print(expectedLength);
    Serial.println(" chars)");

    lastPacketTime = millis();
    return;
  }

  // Signal hors s√©quence
  Serial.print("DEBUG: Signal hors s√©quence: 0x");
  Serial.print(code, HEX);
  Serial.print(" (byte0=0x");
  Serial.print(byte0, HEX);
  Serial.println(")");
}

void resetMessageBuffer() {
  messageBuffer = "";
  expectedLength = 0;
  receivingMessage = false;
  Serial.println("DEBUG: Buffer r√©initialis√©");
}